
    
    type Query {
        info: String!
        feed(filter: String, skip: Int, first: Int, orderBy: TaskOrderByInput): Feed!
        task(id: ID!): Task
    }

    type Feed {
        tasks: [Task!]!
        count: Int!
    }

     type AuthPayload{
        token:String!
        user:User
    }

    type User {
        id: ID!
        name: String!
        email: String!
        tasks: [Task!]!
    }

    type Mutation {
        post(taskName:String!, description:String!): Task!
        signup(email:String!, password:String!, name:String!): AuthPayload
        login(email:String!, password:String!): AuthPayload
        vote(taskId: ID!): Vote
    }

    type Vote {
        id: ID!
        task: Task!
        user: User!
        postedBy: User
    }
    type Task {
        id: ID!
        description: String!
        taskName: String!
        postedBy: User
        deletedTask(id: ID!): Task
        votes: [Vote!]!
    }

    type Subscription {
        newTask: Task
        newVote: Vote
    }

    enum TaskOrderByInput {
        description_ASC
        description_DESC
        taskName_ASC
        taskName_DESC
        createdAt_ASC
        createdAt_DESC
    }